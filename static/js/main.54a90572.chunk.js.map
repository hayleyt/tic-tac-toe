{"version":3,"sources":["components/Square.js","components/Board.js","components/calculateWinner.js","components/Status.js","components/Game.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onChange","value","Board","i","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","Status","data","history","stepNumber","xIsNext","isOnePlayer","current","winner","status","Game","state","Array","fill","handleClick","slice","setState","concat","handleChange","setTimeout","computerPlaysTurn","console","log","randNum","Math","floor","random","includes","newGame","handleTimeTravel","backOne","backTwo","jumpTo","step","splice","pop","handlePlayers","e","isNewGame","target","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.54a90572.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick} onChange={props.onChange}>\n            {props.value}\n        </button>\n    );\n}\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n    renderSquare(i) {\n      return (\n        <Square\n          value={this.props.squares[i]}\n          onClick={() => this.props.onClick(i)}\n          onChange={() => this.props.onChange}\n        />\n      );\n    }\n  \n    render() {\n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n}\n\nexport default Board;","function calculateWinner(squares) {\n  const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n          return squares[a];\n      }\n  }\n  return null;\n}\n\nexport default calculateWinner;","import React from 'react';\nimport calculateWinner from './calculateWinner';\n\nfunction Status(props) {\n        const {history,stepNumber, xIsNext,isOnePlayer} = props.data\n        const current = history[stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        let status = \"\";\n        if (winner) {\n        status = isOnePlayer ? \n            winner === \"O\" ? \"Computer Wins!\" : \"You Win!\"\n            : \n            \"Winner: \" + winner;\n        } \n        else if (stepNumber === 9 && winner === null){\n        status = \"Draw!\"\n        }\n        else {\n        status = isOnePlayer ? \n            \"Human vs Computer!\" : \n            (\"Next player: \" + (xIsNext ? \"X\" : \"O\"));\n        }\n        \n        return (<div>{status}</div>)\n}\n\nexport default Status","import React from 'react';\nimport Board from './Board';\nimport calculateWinner from './calculateWinner';\nimport Status from './Status'\n\nclass Game extends React.Component {\n  state = {\n        history: [\n          {\n            squares: Array(9).fill(null)\n          }\n        ],\n        squares: [],\n        stepNumber: 0,\n        xIsNext: true,\n        isOnePlayer: true\n      };\n\n  handleClick = (i) => {\n    const {xIsNext,isOnePlayer,stepNumber} = this.state;\n    const history = this.state.history.slice(0, stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    if(isOnePlayer){\n      squares[i] = \"X\";\n\n      this.setState({\n        history: history.concat([{squares: squares}]),\n        stepNumber: history.length,\n        xIsNext: false\n      });\n    }\n    else {\n      squares[i] = xIsNext ? \"X\" : \"O\";\n      this.setState({\n        history: history.concat([{squares: squares}]),\n        stepNumber: history.length,\n        xIsNext: !xIsNext\n      });\n    }\n  }\n\n  handleChange = () => {\n    const {xIsNext,isOnePlayer,stepNumber} = this.state;\n    if( (isOnePlayer === false) || stepNumber === 9 || xIsNext) {\n      return;\n    }\n    setTimeout(() => {\n      this.computerPlaysTurn()\n    }, 400)\n\n  }\n\n  computerPlaysTurn = () => {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    console.log(current)\n    let randNum = Math.floor(Math.random() * 9);\n    if(squares.includes(null)){\n      while (squares[randNum] != null){\n        randNum = Math.floor(Math.random() * 9);\n      }\n    }\n    if(!calculateWinner(squares)){\n      squares[randNum] = \"O\"\n    }\n    this.setState({\n      history: history.concat([{squares: squares}]),\n      stepNumber: history.length,\n      xIsNext: true\n    });\n  }\n\n  newGame = () => {\n    this.setState({\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n      isOnePlayer: true\n    })\n  }\n\n  handleTimeTravel = () => {\n    const {stepNumber,isOnePlayer} = this.state;\n    const backOne = (stepNumber-1) > 0 ? (stepNumber-1) : 0;\n    const backTwo = (stepNumber-2) > 1 ? (stepNumber-2) : 0;\n\n    if(isOnePlayer){\n      if(stepNumber === 9){\n        this.jumpTo(backOne) \n      } else{\n        this.jumpTo(backTwo)\n      }\n    } \n    else {\n      this.jumpTo(backOne) \n    }\n  }\n\n  jumpTo = (step) => {\n    let history = this.state.history.splice().pop()\n    console.log(history)\n    \n    if (this.state.isOnePlayer){\n      this.setState({\n        stepNumber: step,\n        xIsNext: true\n      });\n    }\n    else{\n      this.setState({\n        stepNumber: step,\n        xIsNext: (step % 2) === 0\n      });\n    }\n\n  }\n\n  handlePlayers = (e) => {\n    const isNewGame = this.state.history.length === 1\n    if(isNewGame && e.target.name === \"one-player\"){\n      this.setState({isOnePlayer: true})\n    } \n    else if(isNewGame && e.target.name === \"two-player\") {\n      this.setState({isOnePlayer: false});\n    }\n    else if(!isNewGame && e.target.name === \"two-player\")\n    {\n      this.newGame()\n      this.setState({isOnePlayer: false});\n    }\n    else{\n      this.newGame()\n      this.setState({isOnePlayer: true});\n    }\n  }\n\n  render() {\n    const {history,stepNumber} = this.state\n    return (\n      <div className=\"game\">\n\n        <div className=\"header\">\n          <h1>Play Tic Tac Toe</h1>\n          <div className=\"status\">\n            <Status data={this.state} /> \n          </div>\n          <div className=\"player-buttons\">\n              <button \n                  name=\"one-player\" \n                  onClick={this.handlePlayers}\n                  className={this.state.isOnePlayer ? \"selected\" : \"\"}>\n              1 Player\n              </button>\n              <button \n                  name=\"two-player\" \n                  onClick={this.handlePlayers}\n                  className={this.state.isOnePlayer ? \"\" : \"selected\"}>\n              2 Players\n              </button>\n          </div>\n        </div>\n\n        <div className=\"game-board\">\n          <Board\n            squares={history[stepNumber].squares}\n            onClick={i => this.handleClick(i)}\n            onChange={this.handleChange()}\n          />\n        </div>\n\n        <div className=\"time-travel-buttons\">\n          <button name=\"back\" onClick={this.handleTimeTravel}>Step Back</button>\n        </div>\n\n        <div className=\"new-game-button\">\n          <button onClick={this.newGame}>Start New Game</button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Game from './components/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <Game />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}